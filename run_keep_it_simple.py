import config
import torch
import os
from nltk.tokenize import word_tokenize, sent_tokenize

from sacremoses import MosesDetokenizer
mt = MosesDetokenizer(lang='en')

from model_generator import Generator

'''-----------------------------------------------------------------------
'''
device  = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print('device: {}'.format(device))
model = Generator(config.model_card, max_output_length=config.max_output_length, device=device)
if len(config.model_file) > 0:
    model.reload(config.model_file)
model.eval()

'''-----------------------------------------------------------------------
'''
def detokenize_text(text):
    words = text.split(" ")
    #print(words)
    #print()
    text = mt.detokenize(words) 
    #print(text)
    return text

'''-----------------------------------------------------------------------
'''
def find_min_prob(model_output):
    min_prob = -500
    final = ""
    for out in model_output:
        #print('prob: {}'.format(out.get('logprob')))
        if out.get('logprob') > min_prob:
            min_prob = out.get('logprob')
            final = out.get('output_text')
            #print('------------')
            print('min_prob: {}'.format(min_prob))
            #print('final: : {}'.format(final))
            #print('------------')
            
    return final

'''-----------------------------------------------------------------------
'''
def process_text(text):
    text = text.lower()
    text = word_tokenize(text)
    text = " ".join(text)
    text = sent_tokenize(text)
    #print(text)

    return text

'''-----------------------------------------------------------------------
'''
def get_simple_text(text):

    paragraph = detokenize_text(text)
    model_output = model.generate([paragraph], num_runs=config.num_runs, sample=True)[0]
    final = find_min_prob(model_output)

    final = process_text(final)
    print("\n\nTEXT: {}\n".format(paragraph))
    
    return final
'''-----------------------------------------------------------------------
'''

if __name__ == "__main__":

    #TODO: read data frame, store in dataframe
    tm = "the corona discharge from the freely rotating pinwheel arm with ends bent to sharp points gives the air a space charge which repels the point because the polarity is the same for the point and the air.francis hauksbee , curator of instruments for the royal society of london , made the earliest report of electric wind in 1709. the study was the first to provide direct evidence that the electrohydrodynamic force responsible for the ionic wind is caused by a charged particle drag that occur as the electrons and ions push the neutral particles away . this means that the electric field generated by charges on a sharp conductive point is much stronger than the field generated by the same charge residing on a large smooth spherical conductive shell . this repulsion of ions creates an electric `` wind '' that emanates from the tip , which is usually accompanied by a hissing noise due to the change in air pressure at the tip . a vaneless ion wind generator performs the inverse function , using ambient wind to move ions , which are collected yielding electrical energy ."

    final = get_simple_text(tm)

    print("OUT: {}\n".format(final))

